!function(e){function t(t){for(var r,i,c=t[0],l=t[1],s=t[2],p=0,m=[];p<c.length;p++)i=c[p],o[i]&&m.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);m.length;)m.shift()();return a.push.apply(a,s||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,c=1;c<n.length;c++){var l=n[c];0!==o[l]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={1:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var s=0;s<c.length;s++)t(c[s]);var u=l;a.push([19,0]),n()}({19:function(e,t,n){"use strict";n.r(t);var r,o=n(0),a=n(18),i=n(15),c=n(44),l=n(45),s=n(7),u=(n(31),n(30),n(29),n(28),n(27),n(25),n(1)),p=n(16),m=n.n(p),d=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.render=function(){return o.createElement("code",{dangerouslySetInnerHTML:{__html:s.highlight(this.props.code,s.languages.tsx)},className:"language-tsx"})},t}(o.Component),h=m()({createElement:o.createElement,highlight:function(e,t){return s.highlight(t,s.languages.tsx)},elements:{table:function(e){var t=e.children;return o.createElement(u.D,{divider:!0},t)}},components:{Accordion:u.a,AccordionItem:u.b,Alert:u.c,Article:u.d,Badge:u.e,Breadcrumb:u.f,Button:u.g,Card:u.h,CardBody:u.i,CardFooter:u.j,CardHeader:u.k,CardTitle:u.l,Code:f,Link:u.r,Tab:u.A,TabContainer:u.B,TabContent:u.C,Cover:u.n}}),g=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),y=function(e){function t(t){var n=e.call(this,t)||this,r=n.props.match.params,o=r.name,a=r.version;return n.state={name:o,version:a,parsedMarkdown:null,isLoading:!0},n}return g(t,e),t.prototype.componentWillReceiveProps=function(e){var t=this,n=e.match.params,r=n.name,o=n.version;this.state.name!==r&&this.setState({name:r},function(){return t.fetchDocs()}),this.state.version!==o&&this.setState({version:o},function(){return t.fetchDocs()})},t.prototype.shouldComponentUpdate=function(e,t){var n=e.match.params,r=n.name,o=n.version;return this.state.name!==r||(this.state.version!==o||this.state.isLoading!==t.isLoading)},t.prototype.componentDidMount=function(){this.fetchDocs()},t.prototype.render=function(){return o.createElement(u.y,{padding:!0},o.createElement(u.d,{title:this.state.name.charAt(0).toUpperCase()+this.state.name.substr(1)},this.state.parsedMarkdown?this.state.parsedMarkdown.tree:null))},t.prototype.fetchDocs=function(){var e=this;this.setState({isLoading:!0}),console.log(this.state.name),fetch("src/docs/"+this.state.version+"/"+(this.state.name.charAt(0).toUpperCase()+this.state.name.substr(1))+".md").then(function(e){return e.text()}).then(function(t){e.setState({parsedMarkdown:h(t),isLoading:!1})}).catch(function(e){console.error(e)})},t}(o.Component),v={introduction:"Introduction",accordion:"Accordion",alert:"Alert",article:"Article",badge:"Badge",breadcrumb:"Breadcrumb",button:"Button",card:"Card",container:"Container",cover:"Cover",dark:"Dark",dropdown:"Dropdown",flex:"Flex",grid:"Grid",icon:"Icon",image:"Image",labels:"Labels",light:"Light",Lightbox:"Lightbox",link:"Link",list:"List",margin:"Margin",nav:"Nav",navbar:"Navbar",offcanvas:"Offcanvas",overlay:"Overlay",panel:"Panel",parallax:"Parallax",progress:"Progress",scrollspy:"Scrollspy",section:"Section",sidebar:"Sidebar",slideshow:"Slideshow",tab:"Tab",table:"Table"},b=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={version:"0.0.1"},n}return b(t,e),t.prototype.onVersionChange=function(e){this.setState({version:e.target.value})},t.prototype.render=function(){return o.createElement(u.y,null,o.createElement(u.m,null,o.createElement(u.m,null,o.createElement(u.z,{style:{top:"80px",bottom:"0",boxSizing:"border-box",padding:"40px 40px 60px 40px",borderRight:"1px #e5e5e5 solid",height:"auto",overflow:"auto"},position:"fixed"},o.createElement(u.t,{preset:"default"},this.renderMenu()))),o.createElement(u.m,{size:"1-1",style:{paddingLeft:"220"}},o.createElement(i.a,{path:this.props.match.url+"/:version/:name",component:y}))))},t.prototype.renderMenu=function(){var e=this,t=0;return Object.keys(v).map(function(n){return t++,o.createElement(u.u,{key:n,type:1===t?"divider":null},o.createElement(c.a,{to:"/docs/"+e.state.version+"/"+v[n].toLowerCase()},v[n]))})},t}(o.Component),_=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return _(t,e),t.prototype.render=function(){return o.createElement(u.o,{direction:"column"},o.createElement(u.q,null,o.createElement(u.m,{size:"large",type:"image",style:{backgroundImage:'url("src/images/background.svg")',width:"expand",height:"100%"}},o.createElement(u.o,{alignment:"center"},o.createElement("object",{width:"300",height:"300",data:"src/images/uikit-react.svg"})),o.createElement(u.o,{alignment:"center"},o.createElement("h1",null,"UIkit React")),o.createElement(u.o,{alignment:"center"},o.createElement(u.g,{size:"large",color:""},"Get Started")),o.createElement(u.y,{padding:"small"},o.createElement(u.o,{alignment:"center"},o.createElement("h4",null," Use Uikit with React, a powerfully simple framework "))))))},t}(o.Component),O=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();document.addEventListener("DOMContentLoaded",function(){console.log(u.y),Object(a.render)(o.createElement(x,null),document.getElementById("root"))},!1);var x=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.render=function(){return o.createElement(l.a,{basename:"/uikit-react"},o.createElement(u.y,{position:"relative"},o.createElement(u.y,{color:"secondary",preserveColor:!0},o.createElement(u.x,{options:"animation: uk-animation-slide-top; cls-inactive: uk-navbar-transparent uk-light; top: 556;"},o.createElement(u.w,null,o.createElement(u.v,{align:"left"},o.createElement(u.s,{padding:"small"},o.createElement("a",{href:"/"},o.createElement("img",{width:"200",height:"200",src:"src/images/uikit-react-simple-text.svg"})))),o.createElement(u.v,{align:"right"},o.createElement(u.s,null,o.createElement(c.a,{to:"/docs/0.0.1/Introduction"},o.createElement(u.g,{size:"small"},"Documentation"))),o.createElement(u.s,null,o.createElement(u.r,null,"Changelog")),o.createElement(u.s,null,o.createElement(u.r,{href:"https://github.com/vacarsu/dimension-cms"},o.createElement(u.p,{options:"github",button:!0}))))))),o.createElement(i.a,{exact:!0,path:"/",component:w}),o.createElement(i.a,{path:"/docs",component:E})))},t}(o.Component)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0RvY3MvY29kZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0RvY3MvbWFya3N5LWNvbXBvbmVudHMudHN4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Eb2NzL0RvY3VtZW50YXRpb24udHN4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Eb2NzL2RvY3MtbmF2LnRzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Eb2NzL0RvY3NQYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvSW5kZXgvSW5kZXhQYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRzeCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjEiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsImNvZGVfQ29kZSIsIl9zdXBlciIsIkNvZGUiLCJfX2V4dGVuZHMiLCJyZW5kZXIiLCJyZWFjdCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwicHJpc20iLCJ0aGlzIiwicHJvcHMiLCJjb2RlIiwidHN4IiwiY2xhc3NOYW1lIiwiY29tcGlsZSIsImNvbXBvbmVudHNfZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJoaWdobGlnaHQiLCJsYW5ndWFnZSIsImVsZW1lbnRzIiwidGFibGUiLCJfYSIsImNoaWxkcmVuIiwidWlraXRfcmVhY3QiLCJkaXZpZGVyIiwiY29tcG9uZW50cyIsIkFjY29yZGlvbiIsIkFjY29yZGlvbkl0ZW0iLCJBbGVydCIsIkFydGljbGUiLCJCYWRnZSIsIkJyZWFkY3J1bWIiLCJCdXR0b24iLCJDYXJkIiwiQ2FyZEJvZHkiLCJDYXJkRm9vdGVyIiwiQ2FyZEhlYWRlciIsIkNhcmRUaXRsZSIsIkxpbmsiLCJUYWIiLCJUYWJDb250YWluZXIiLCJUYWJDb250ZW50IiwiQ292ZXIiLCJEb2N1bWVudGF0aW9uX0RvY3VtZW50YXRpb24iLCJEb2N1bWVudGF0aW9uIiwiX3RoaXMiLCJtYXRjaCIsInBhcmFtcyIsInZlcnNpb24iLCJzdGF0ZSIsInBhcnNlZE1hcmtkb3duIiwiaXNMb2FkaW5nIiwiRG9jdW1lbnRhdGlvbl9leHRlbmRzIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwiZmV0Y2hEb2NzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJwYWRkaW5nIiwidGl0bGUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsInRyZWUiLCJjb25zb2xlIiwibG9nIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwidGV4dCIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJkb2NzTmF2IiwiaW50cm9kdWN0aW9uIiwiYWNjb3JkaW9uIiwiYWxlcnQiLCJhcnRpY2xlIiwiYmFkZ2UiLCJicmVhZGNydW1iIiwiYnV0dG9uIiwiY2FyZCIsImNvbnRhaW5lciIsImNvdmVyIiwiZGFyayIsImRyb3Bkb3duIiwiZmxleCIsImdyaWQiLCJpY29uIiwiaW1hZ2UiLCJsYWJlbHMiLCJsaWdodCIsIkxpZ2h0Ym94IiwibGluayIsImxpc3QiLCJtYXJnaW4iLCJuYXYiLCJuYXZiYXIiLCJvZmZjYW52YXMiLCJvdmVybGF5IiwicGFuZWwiLCJwYXJhbGxheCIsInByb2dyZXNzIiwic2Nyb2xsc3B5Iiwic2VjdGlvbiIsInNpZGViYXIiLCJzbGlkZXNob3ciLCJ0YWIiLCJEb2NzUGFnZV9Eb2NzUGFnZSIsIkRvY3NQYWdlIiwiRG9jc1BhZ2VfZXh0ZW5kcyIsIm9uVmVyc2lvbkNoYW5nZSIsImV2ZW50IiwidGFyZ2V0Iiwic3R5bGUiLCJ0b3AiLCJib3R0b20iLCJib3hTaXppbmciLCJib3JkZXJSaWdodCIsImhlaWdodCIsIm92ZXJmbG93IiwicG9zaXRpb24iLCJwcmVzZXQiLCJyZW5kZXJNZW51Iiwic2l6ZSIsInBhZGRpbmdMZWZ0IiwiUm91dGUiLCJwYXRoIiwidXJsIiwiY29tcG9uZW50IiwiY291bnQiLCJrZXlzIiwibWFwIiwiayIsInR5cGUiLCJOYXZMaW5rIiwidG8iLCJ0b0xvd2VyQ2FzZSIsIkluZGV4UGFnZV9JbmRleFBhZ2UiLCJJbmRleFBhZ2UiLCJJbmRleFBhZ2VfZXh0ZW5kcyIsImRpcmVjdGlvbiIsImJhY2tncm91bmRJbWFnZSIsIndpZHRoIiwiYWxpZ25tZW50IiwiY29sb3IiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWFjdF9kb20iLCJhcHBfRXhhbXBsZVBhZ2UiLCJnZXRFbGVtZW50QnlJZCIsIkV4YW1wbGVQYWdlIiwiYXBwX2V4dGVuZHMiLCJCcm93c2VyUm91dGVyIiwiYmFzZW5hbWUiLCJwcmVzZXJ2ZUNvbG9yIiwib3B0aW9ucyIsImFsaWduIiwiaHJlZiIsInNyYyIsImV4YWN0Il0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLEVBQUEsR0FJQU0sRUFBQSxFQUFBQyxLQUNRRCxFQUFBSCxFQUFBSyxPQUFvQkYsSUFDNUJKLEVBQUFDLEVBQUFHLEdBQ0FHLEVBQUFQLElBQ0FLLEVBQUFHLEtBQUFELEVBQUFQLEdBQUEsSUFFQU8sRUFBQVAsR0FBQSxFQUVBLElBQUFELEtBQUFHLEVBQ0FPLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFWLEVBQUFILEtBQ0FjLEVBQUFkLEdBQUFHLEVBQUFILElBS0EsSUFGQWUsS0FBQWhCLEdBRUFPLEVBQUFDLFFBQ0FELEVBQUFVLE9BQUFWLEdBT0EsT0FIQVcsRUFBQVIsS0FBQVMsTUFBQUQsRUFBQWIsT0FHQWUsSUFFQSxTQUFBQSxJQUVBLElBREEsSUFBQUMsRUFDQWYsRUFBQSxFQUFpQkEsRUFBQVksRUFBQVYsT0FBNEJGLElBQUEsQ0FHN0MsSUFGQSxJQUFBZ0IsRUFBQUosRUFBQVosR0FDQWlCLEdBQUEsRUFDQUMsRUFBQSxFQUFrQkEsRUFBQUYsRUFBQWQsT0FBMkJnQixJQUFBLENBQzdDLElBQUFDLEVBQUFILEVBQUFFLEdBQ0EsSUFBQWYsRUFBQWdCLEtBQUFGLEdBQUEsR0FFQUEsSUFDQUwsRUFBQVEsT0FBQXBCLElBQUEsR0FDQWUsRUFBQU0sSUFBQUMsRUFBQU4sRUFBQSxLQUdBLE9BQUFELEVBSUEsSUFBQVEsS0FLQXBCLEdBQ0FxQixFQUFBLEdBR0FaLEtBR0EsU0FBQVMsRUFBQTFCLEdBR0EsR0FBQTRCLEVBQUE1QixHQUNBLE9BQUE0QixFQUFBNUIsR0FBQThCLFFBR0EsSUFBQUMsRUFBQUgsRUFBQTVCLElBQ0FLLEVBQUFMLEVBQ0FnQyxHQUFBLEVBQ0FGLFlBVUEsT0FO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QUFBLEdBQVFvRyxTQUFTLFlBQ2R0SCxFQUFBLGNBQUNrQixFQUFBLEdBQVE0SCxNQUFNLFlBQVlVLGVBQWEsR0FDcEN4SixFQUFBLGNBQUNrQixFQUFBLEdBQWF1SSxRQUFRLDhGQUNsQnpKLEVBQUEsY0FBQ2tCLEVBQUEsRUFBZSxLQUNabEIsRUFBQSxjQUFDa0IsRUFBQSxHQUFPd0ksTUFBTSxRQUNWMUosRUFBQSxjQUFDa0IsRUFBQSxHQUFTcUMsUUFBUSxTQUNWdkQsRUFBQSxtQkFBRzJKLEtBQUssS0FBSTNKLEVBQUEscUJBQUs0SSxNQUFNLE1BQU14QixPQUFPLE1BQU13QyxJQUFJLDhDQUkxRDVKLEVBQUEsY0FBQ2tCLEVBQUEsR0FBT3dJLE1BQU0sU0FDVjFKLEVBQUEsY0FBQ2tCLEVBQUEsRUFBUSxLQUNEbEIsRUFBQSxjQUFDb0ksRUFBQSxHQUFRQyxHQUFHLDRCQUNSckksRUFBQSxjQUFDa0IsRUFBQSxHQUFPdUcsS0FBSyxTQUFPLG1CQUc1QnpILEVBQUEsY0FBQ2tCLEVBQUEsRUFBUSxLQUNMbEIsRUFBQSxjQUFDa0IsRUFBQSxFQUFJLG1CQUlUbEIsRUFBQSxjQUFDa0IsRUFBQSxFQUFRLEtBQ1RsQixFQUFBLGNBQUNrQixFQUFBLEdBQUt5SSxLQUFLLDRDQUNQM0osRUFBQSxjQUFDa0IsRUFBQSxHQUFLdUksUUFBUSxTQUFTNUUsUUFBTSxVQVFyRDdFLEVBQUEsY0FBQzJILEVBQUEsR0FBTWtDLE9BQUssRUFBQ2pDLEtBQUssSUFBSUUsVUFBV1MsSUFDakN2SSxFQUFBLGNBQUMySCxFQUFBLEdBQU1DLEtBQUssUUFBUUUsVUFBV3JCLE9BTXZEMkMsRUEzQ0EsQ0FBMEJwSixFQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDE6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzE5LDBdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tL3NlcnZlcic7XG5pbXBvcnQgKiBhcyBQcmlzbSBmcm9tICdwcmlzbWpzJztcblxuZXhwb3J0IGNsYXNzIENvZGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Y29kZVxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogUHJpc20uaGlnaGxpZ2h0KHRoaXMucHJvcHMuY29kZSwgUHJpc20ubGFuZ3VhZ2VzLnRzeCkgfX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsYW5ndWFnZS10c3hcIj5cbiAgICAgICAgICAgIDwvY29kZT5cbiAgICAgICAgKTtcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJpc20gZnJvbSAncHJpc21qcyc7XG5pbXBvcnQgeyBlc2NhcGUgfSBmcm9tICdoZSc7XG5pbXBvcnQgbWFya3N5IGZyb20gJ21hcmtzeS9jb21wb25lbnRzJztcbmltcG9ydCB7XG4gICAgQWNjb3JkaW9uLFxuICAgIEFjY29yZGlvbkl0ZW0sXG4gICAgQWxlcnQsXG4gICAgQXJ0aWNsZSxcbiAgICBCYWRnZSxcbiAgICBCcmVhZGNydW1iLFxuICAgIEJ1dHRvbixcbiAgICBDYXJkLFxuICAgIENhcmRCb2R5LFxuICAgIENhcmRGb290ZXIsXG4gICAgQ2FyZEhlYWRlcixcbiAgICBDYXJkVGl0bGUsXG4gICAgTGluayxcbiAgICBUYWIsXG4gICAgVGFiQ29udGFpbmVyLFxuICAgIFRhYkNvbnRlbnQsXG4gICAgVGFibGUsXG4gICAgQ292ZXIsXG59IGZyb20gJ3Vpa2l0LXJlYWN0JztcbmltcG9ydCB7IENvZGUgfSBmcm9tICcuL2NvZGUnO1xuXG5leHBvcnQgY29uc3QgY29tcGlsZSA9IG1hcmtzeSh7XG4gICAgY3JlYXRlRWxlbWVudDogUmVhY3QuY3JlYXRlRWxlbWVudCxcbiAgICBoaWdobGlnaHQobGFuZ3VhZ2UsIGNvZGUpIHtcbiAgICAgICAgcmV0dXJuIFByaXNtLmhpZ2hsaWdodChjb2RlLCBQcmlzbS5sYW5ndWFnZXMudHN4KTtcbiAgICB9LFxuICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHRhYmxlKHtjaGlsZHJlbn0pIHtcbiAgICAgICAgICAgIHJldHVybiA8VGFibGUgZGl2aWRlcj57Y2hpbGRyZW59PC9UYWJsZT5cbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBBY2NvcmRpb24sXG4gICAgICAgIEFjY29yZGlvbkl0ZW0sXG4gICAgICAgIEFsZXJ0LFxuICAgICAgICBBcnRpY2xlLFxuICAgICAgICBCYWRnZSxcbiAgICAgICAgQnJlYWRjcnVtYixcbiAgICAgICAgQnV0dG9uLFxuICAgICAgICBDYXJkLFxuICAgICAgICBDYXJkQm9keSxcbiAgICAgICAgQ2FyZEZvb3RlcixcbiAgICAgICAgQ2FyZEhlYWRlcixcbiAgICAgICAgQ2FyZFRpdGxlLFxuICAgICAgICBDb2RlLFxuICAgICAgICBMaW5rLFxuICAgICAgICBUYWIsXG4gICAgICAgIFRhYkNvbnRhaW5lcixcbiAgICAgICAgVGFiQ29udGVudCxcbiAgICAgICAgQ292ZXIsXG4gICAgfVxufSk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJpc20gZnJvbSAncHJpc21qcyc7XG5pbXBvcnQgKiBhcyBtYXJrZWQgZnJvbSAnbWFya2VkJztcbmltcG9ydCB7IFJvdXRlLCBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBNYXJrZG93biB9IGZyb20gJy4vcGFyc2UtbWFya2Rvd24nO1xuaW1wb3J0IHsgY29tcGlsZSB9IGZyb20gJy4vbWFya3N5LWNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgICBBcnRpY2xlLFxuICAgIENvbnRhaW5lcixcbiAgICBGbGV4LFxuICAgIExpc3QsXG4gICAgTGlzdEl0ZW0sXG4gICAgTmF2LFxuICAgIE5hdkl0ZW0sXG4gICAgU2VjdGlvbixcbiAgICBTaWRlYmFyXG59IGZyb20gJ3Vpa2l0LXJlYWN0JztcblxuZXhwb3J0IGNsYXNzIERvY3VtZW50YXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgdmVyc2lvbiB9ID0gdGhpcy5wcm9wcy5tYXRjaC5wYXJhbXM7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgICAgIHBhcnNlZE1hcmtkb3duOiBudWxsLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiB0cnVlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgY29uc3QgeyBuYW1lLCB2ZXJzaW9uIH0gPSBuZXh0UHJvcHMubWF0Y2gucGFyYW1zO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5uYW1lICE9PSBuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICB9LCAoKSA9PiB0aGlzLmZldGNoRG9jcygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb25cbiAgICAgICAgICAgIH0sICgpID0+IHRoaXMuZmV0Y2hEb2NzKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgdmVyc2lvbiB9ID0gbmV4dFByb3BzLm1hdGNoLnBhcmFtcztcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubmFtZSAhPT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzTG9hZGluZyAhPT0gbmV4dFN0YXRlLmlzTG9hZGluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuZmV0Y2hEb2NzKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFNlY3Rpb24gcGFkZGluZz5cbiAgICAgICAgICAgICAgICA8QXJ0aWNsZSB0aXRsZT17dGhpcy5zdGF0ZS5uYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zdGF0ZS5uYW1lLnN1YnN0cigxKX0+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnBhcnNlZE1hcmtkb3duID8gdGhpcy5zdGF0ZS5wYXJzZWRNYXJrZG93bi50cmVlIDogbnVsbH1cbiAgICAgICAgICAgICAgICA8L0FydGljbGU+XG4gICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmZXRjaERvY3MoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0xvYWRpbmc6IHRydWUgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUubmFtZSk7XG4gICAgICAgIGZldGNoKGBzcmMvZG9jcy8ke3RoaXMuc3RhdGUudmVyc2lvbn0vJHt0aGlzLnN0YXRlLm5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnN0YXRlLm5hbWUuc3Vic3RyKDEpfS5tZGApXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMudGV4dCgpKVxuICAgICAgICAgICAgLnRoZW4odGV4dCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZE1hcmtkb3duOiBjb21waWxlKHRleHQpLFxuICAgICAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IGRvY3NOYXYgPSB7XG4gICAgaW50cm9kdWN0aW9uOiAnSW50cm9kdWN0aW9uJyxcbiAgICBhY2NvcmRpb246ICdBY2NvcmRpb24nLFxuICAgIGFsZXJ0OiAnQWxlcnQnLFxuICAgIGFydGljbGU6ICdBcnRpY2xlJyxcbiAgICBiYWRnZTogJ0JhZGdlJyxcbiAgICBicmVhZGNydW1iOiAnQnJlYWRjcnVtYicsXG4gICAgYnV0dG9uOiAnQnV0dG9uJyxcbiAgICBjYXJkOiAnQ2FyZCcsXG4gICAgY29udGFpbmVyOiAnQ29udGFpbmVyJyxcbiAgICBjb3ZlcjogJ0NvdmVyJyxcbiAgICBkYXJrOiAnRGFyaycsXG4gICAgZHJvcGRvd246ICdEcm9wZG93bicsXG4gICAgZmxleDogJ0ZsZXgnLFxuICAgIGdyaWQ6ICdHcmlkJyxcbiAgICBpY29uOiAnSWNvbicsXG4gICAgaW1hZ2U6ICdJbWFnZScsXG4gICAgbGFiZWxzOiAnTGFiZWxzJyxcbiAgICBsaWdodDogJ0xpZ2h0JyxcbiAgICBMaWdodGJveDogJ0xpZ2h0Ym94JyxcbiAgICBsaW5rOiAnTGluaycsXG4gICAgbGlzdDogJ0xpc3QnLFxuICAgIG1hcmdpbjogJ01hcmdpbicsXG4gICAgbmF2OiAnTmF2JyxcbiAgICBuYXZiYXI6ICdOYXZiYXInLFxuICAgIG9mZmNhbnZhczogJ09mZmNhbnZhcycsXG4gICAgb3ZlcmxheTogJ092ZXJsYXknLFxuICAgIHBhbmVsOiAnUGFuZWwnLFxuICAgIHBhcmFsbGF4OiAnUGFyYWxsYXgnLFxuICAgIHByb2dyZXNzOiAnUHJvZ3Jlc3MnLFxuICAgIHNjcm9sbHNweTogJ1Njcm9sbHNweScsXG4gICAgc2VjdGlvbjogJ1NlY3Rpb24nLFxuICAgIHNpZGViYXI6ICdTaWRlYmFyJyxcbiAgICBzbGlkZXNob3c6ICdTbGlkZXNob3cnLFxuICAgIHRhYjogJ1RhYicsXG4gICAgdGFibGU6ICdUYWJsZSdcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZSwgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQge1xuICAgIENvbnRhaW5lcixcbiAgICBGbGV4LFxuICAgIEZvcm0sXG4gICAgSW5wdXRDb250YWluZXIsXG4gICAgTGFiZWwsXG4gICAgU2VsZWN0LFxuICAgIFNlbGVjdE9wdGlvbixcbiAgICBMaXN0LFxuICAgIExpc3RJdGVtLFxuICAgIE5hdixcbiAgICBOYXZJdGVtLFxuICAgIFNlY3Rpb24sXG4gICAgU2lkZWJhclxufSBmcm9tICd1aWtpdC1yZWFjdCc7XG5cbmltcG9ydCB7IERvY3VtZW50YXRpb24gfSBmcm9tICcuL0RvY3VtZW50YXRpb24nO1xuaW1wb3J0IHsgZG9jc05hdiB9IGZyb20gJy4vZG9jcy1uYXYnO1xuXG5leHBvcnQgY2xhc3MgRG9jc1BhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHtcbiAgICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0geyB2ZXJzaW9uOiAnMC4wLjEnIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblZlcnNpb25DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2ZXJzaW9uOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFNlY3Rpb24+XG4gICAgICAgICAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTaWRlYmFyIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJzgwcHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc0MHB4IDQwcHggNjBweCA0MHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQ6ICcxcHggI2U1ZTVlNSBzb2xpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbj1cImZpeGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdiBwcmVzZXQ9XCJkZWZhdWx0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8TmF2SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJ2ZXJzaW9uXCI+VmVyc2lvbjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwidmVyc2lvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52ZXJzaW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25WZXJzaW9uQ2hhbmdlLmJpbmQodGhpcyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdE9wdGlvbiB2YWx1ZT1cIjAuMC4xXCI+MC4wLjE8L1NlbGVjdE9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RPcHRpb24gdmFsdWU9XCIwLjAuMlwiPjAuMC4yPC9TZWxlY3RPcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2SXRlbT4gKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlck1lbnUoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2lkZWJhcj5cbiAgICAgICAgICAgICAgICAgICAgPC9Db250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxDb250YWluZXIgc2l6ZT1cIjEtMVwiIHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiAnMjIwJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPXtgJHt0aGlzLnByb3BzLm1hdGNoLnVybH0vOnZlcnNpb24vOm5hbWVgfSBjb21wb25lbnQ9e0RvY3VtZW50YXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyTWVudSgpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGRvY3NOYXYpLm1hcCgoaykgPT4ge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPE5hdkl0ZW0ga2V5PXtrfSB0eXBlPXtjb3VudCA9PT0gMSA/IFwiZGl2aWRlclwiIDogbnVsbH0+XG4gICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPXtgL2RvY3MvJHt0aGlzLnN0YXRlLnZlcnNpb259LyR7ZG9jc05hdltrXS50b0xvd2VyQ2FzZSgpfWB9Pntkb2NzTmF2W2tdfTwvTmF2TGluaz5cbiAgICAgICAgICAgICAgICA8L05hdkl0ZW0+XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICd1aWtpdC1yZWFjdCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICd1aWtpdC1yZWFjdCc7XG5pbXBvcnQgeyBGbGV4IH0gZnJvbSAndWlraXQtcmVhY3QnO1xuaW1wb3J0IHsgTGlnaHQgfSBmcm9tICd1aWtpdC1yZWFjdCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAndWlraXQtcmVhY3QnO1xuaW1wb3J0IHsgTGlzdEl0ZW0gfSBmcm9tICd1aWtpdC1yZWFjdCc7XG5pbXBvcnQgeyBTZWN0aW9uIH0gZnJvbSAndWlraXQtcmVhY3QnO1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICd1aWtpdC1yZWFjdCc7XG5pbXBvcnQgeyBEYXJrIH0gZnJvbSAndWlraXQtcmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3Vpa2l0LXJlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICd1aWtpdC1yZWFjdCc7XG5pbXBvcnQgeyBDb3ZlciB9IGZyb20gJ3Vpa2l0LXJlYWN0JztcblxuZXhwb3J0IGNsYXNzIEluZGV4UGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEZsZXggZGlyZWN0aW9uPVwiY29sdW1uXCIgID5cbiAgICAgICAgICAgICAgICA8TGlnaHQgPlxuICAgICAgICAgICAgICAgIDxDb250YWluZXIgc2l6ZT1cImxhcmdlXCIgdHlwZT1cImltYWdlXCIgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiAndXJsKFwic3JjL2ltYWdlcy9iYWNrZ3JvdW5kLnN2Z1wiKScsIHdpZHRoOiBcImV4cGFuZFwiLCBoZWlnaHQ6XCIxMDAlXCJ9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RmxleCBhbGlnbm1lbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9iamVjdCB3aWR0aD1cIjMwMFwiIGhlaWdodD1cIjMwMFwiIGRhdGE9XCJzcmMvaW1hZ2VzL3Vpa2l0LXJlYWN0LnN2Z1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGbGV4IGFsaWdubWVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+VUlraXQgUmVhY3Q8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RmxleCBhbGlnbm1lbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzaXplPVwibGFyZ2VcIiBjb2xvcj1cIlwiPkdldCBTdGFydGVkPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uIHBhZGRpbmc9XCJzbWFsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RmxleCBhbGlnbm1lbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND4gVXNlIFVpa2l0IHdpdGggUmVhY3QsIGEgcG93ZXJmdWxseSBzaW1wbGUgZnJhbWV3b3JrIDwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L0xpZ2h0PlxuICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCAncHJpc21qcyc7XG5pbXBvcnQgJ3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1qYXZhc2NyaXB0Lm1pbic7XG5pbXBvcnQgJ3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1qc3gubWluJztcbmltcG9ydCAncHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXRzeC5taW4nO1xuaW1wb3J0ICdwcmlzbWpzL3BsdWdpbnMvdG9vbGJhci9wcmlzbS10b29sYmFyJztcbmltcG9ydCAncHJpc21qcy9wbHVnaW5zL2NvcHktdG8tY2xpcGJvYXJkL3ByaXNtLWNvcHktdG8tY2xpcGJvYXJkJztcbmltcG9ydCAncHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNzcy5taW4nO1xuXG5pbXBvcnQge1xuICAgIENvbnRhaW5lcixcbiAgICBMaWdodCxcbiAgICBJY29uLFxuICAgIExpbmssXG4gICAgTGlzdCxcbiAgICBMaXN0SXRlbSxcbiAgICBPZmZjYW52YXMsXG4gICAgT2ZmY2FudmFzQ29udGFpbmVyLFxuICAgIE5hdmJhcixcbiAgICBOYXZiYXJDb250YWluZXIsXG4gICAgTmF2YmFyU3RpY2t5LFxuICAgIFNlY3Rpb24sXG4gICAgRmxleCxcbiAgICBCdXR0b24sXG5cbiAgICBcbn0gZnJvbSAndWlraXQtcmVhY3QnO1xuXG5cbmltcG9ydCB7IERvY3NQYWdlIH0gZnJvbSAnLi9wYWdlcy9Eb2NzL0RvY3NQYWdlJztcbmltcG9ydCB7IEluZGV4UGFnZSB9IGZyb20gJy4vcGFnZXMvSW5kZXgvSW5kZXhQYWdlJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhTZWN0aW9uKTtcbiAgICByZW5kZXIoXG4gICAgICAgIDxFeGFtcGxlUGFnZSAvPixcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKVxuICAgICk7XG59LCBmYWxzZSk7XG5cbmNsYXNzIEV4YW1wbGVQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICAgICAgPFJvdXRlciBiYXNlbmFtZT1cIi91aWtpdC1yZWFjdFwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvbiBwb3NpdGlvbj1cInJlbGF0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VjdGlvbiBjb2xvcj1cInNlY29uZGFyeVwiIHByZXNlcnZlQ29sb3I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdmJhclN0aWNreSBvcHRpb25zPVwiYW5pbWF0aW9uOiB1ay1hbmltYXRpb24tc2xpZGUtdG9wOyBjbHMtaW5hY3RpdmU6IHVrLW5hdmJhci10cmFuc3BhcmVudCB1ay1saWdodDsgdG9wOiA1NTY7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyIGFsaWduPVwibGVmdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbSBwYWRkaW5nPVwic21hbGxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvXCI+PGltZyB3aWR0aD1cIjIwMFwiIGhlaWdodD1cIjIwMFwiIHNyYz1cInNyYy9pbWFnZXMvdWlraXQtcmVhY3Qtc2ltcGxlLXRleHQuc3ZnXCIvPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXI+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXIgYWxpZ249XCJyaWdodFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2RvY3MvMC4wLjEvSW50cm9kdWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzaXplPVwic21hbGxcIj5Eb2N1bWVudGF0aW9uPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZWxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vdmFjYXJzdS9kaW1lbnNpb24tY21zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBvcHRpb25zPVwiZ2l0aHViXCIgYnV0dG9uIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyU3RpY2t5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0luZGV4UGFnZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2RvY3NcIiBjb21wb25lbnQ9e0RvY3NQYWdlfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICAgICAgICAgPC9Sb3V0ZXI+XG5cbiAgICAgICAgKVxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9