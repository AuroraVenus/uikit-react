!function(e){function t(t){for(var r,i,c=t[0],l=t[1],s=t[2],p=0,m=[];p<c.length;p++)i=c[p],o[i]&&m.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);m.length;)m.shift()();return a.push.apply(a,s||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,c=1;c<n.length;c++){var l=n[c];0!==o[l]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={1:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var s=0;s<c.length;s++)t(c[s]);var u=l;a.push([19,0]),n()}({19:function(e,t,n){"use strict";n.r(t);var r,o=n(0),a=n(18),i=n(15),c=n(44),l=n(45),s=n(7),u=(n(31),n(30),n(29),n(28),n(27),n(25),n(1)),p=n(16),m=n.n(p),d=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.render=function(){return o.createElement("code",{dangerouslySetInnerHTML:{__html:s.highlight(this.props.code,s.languages.tsx)},className:"language-tsx"})},t}(o.Component),h=m()({createElement:o.createElement,highlight:function(e,t){return s.highlight(t,s.languages.tsx)},elements:{table:function(e){var t=e.children;return o.createElement(u.C,{divider:!0},t)}},components:{Accordion:u.a,AccordionItem:u.b,Alert:u.c,Article:u.d,Badge:u.e,Breadcrumb:u.f,Button:u.g,Card:u.h,CardBody:u.i,CardFooter:u.j,CardHeader:u.k,CardTitle:u.l,Code:f,Link:u.q,Tab:u.z,TabContainer:u.A,TabContent:u.B}}),g=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),y=function(e){function t(t){var n=e.call(this,t)||this,r=n.props.match.params,o=r.name,a=r.version;return n.state={name:o,version:a,parsedMarkdown:null,isLoading:!0},n}return g(t,e),t.prototype.componentWillReceiveProps=function(e){var t=this,n=e.match.params,r=n.name,o=n.version;this.state.name!==r&&this.setState({name:r},function(){return t.fetchDocs()}),this.state.version!==o&&this.setState({version:o},function(){return t.fetchDocs()})},t.prototype.shouldComponentUpdate=function(e,t){var n=e.match.params,r=n.name,o=n.version;return this.state.name!==r||(this.state.version!==o||this.state.isLoading!==t.isLoading)},t.prototype.componentDidMount=function(){this.fetchDocs()},t.prototype.render=function(){return o.createElement(u.x,{padding:!0},o.createElement(u.d,{title:this.state.name.charAt(0).toUpperCase()+this.state.name.substr(1)},this.state.parsedMarkdown?this.state.parsedMarkdown.tree:null))},t.prototype.fetchDocs=function(){var e=this;this.setState({isLoading:!0}),console.log(this.state.name),fetch("src/docs/"+this.state.version+"/"+(this.state.name.charAt(0).toUpperCase()+this.state.name.substr(1))+".md").then(function(e){return e.text()}).then(function(t){e.setState({parsedMarkdown:h(t),isLoading:!1})}).catch(function(e){console.error(e)})},t}(o.Component),v={introduction:"Introduction",accordion:"Accordion",alert:"Alert",article:"Article",badge:"Badge",breadcrumb:"Breadcrumb",button:"Button",card:"Card",container:"Container",cover:"Cover",dark:"Dark",dropdown:"Dropdown",flex:"Flex",grid:"Grid",icon:"Icon",image:"Image",labels:"Labels",light:"Light",Lightbox:"Lightbox",link:"Link",list:"List",margin:"Margin",nav:"Nav",navbar:"Navbar",offcanvas:"Offcanvas",overlay:"Overlay",panel:"Panel",parallax:"Parallax",progress:"Progress",scrollspy:"Scrollspy",section:"Section",sidebar:"Sidebar",slideshow:"Slideshow",tab:"Tab",table:"Table"},b=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={version:"0.0.1"},n}return b(t,e),t.prototype.onVersionChange=function(e){this.setState({version:e.target.value})},t.prototype.render=function(){return o.createElement(u.x,null,o.createElement(u.m,null,o.createElement(u.m,null,o.createElement(u.y,{style:{top:"80px",bottom:"0",boxSizing:"border-box",padding:"40px 40px 60px 40px",borderRight:"1px #e5e5e5 solid",height:"auto",overflow:"auto"},position:"fixed"},o.createElement(u.s,{preset:"default"},this.renderMenu()))),o.createElement(u.m,{size:"1-1",style:{paddingLeft:"220"}},o.createElement(i.a,{path:this.props.match.url+"/:version/:name",component:y}))))},t.prototype.renderMenu=function(){var e=this,t=0;return Object.keys(v).map(function(n){return t++,o.createElement(u.t,{key:n,type:1===t?"divider":null},o.createElement(c.a,{to:"/docs/"+e.state.version+"/"+v[n].toLowerCase()},v[n]))})},t}(o.Component),_=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return _(t,e),t.prototype.render=function(){return o.createElement(u.n,{direction:"column"},o.createElement(u.p,null,o.createElement(u.x,{color:"secondary",padding:"large"},o.createElement(u.n,{alignment:"center"},o.createElement("object",{width:"300",height:"300",data:"src/images/uikit-react.svg"})),o.createElement(u.n,{alignment:"center"},o.createElement("h1",null,"UIkit React")),o.createElement(u.n,{alignment:"center"},o.createElement(u.g,{size:"large",color:""},"Get Started")),o.createElement(u.x,{padding:"small"},o.createElement(u.n,{alignment:"center"},o.createElement("h4",null," Use Uikit with React, a powerfully simple framwork "))))))},t}(o.Component),O=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();document.addEventListener("DOMContentLoaded",function(){console.log(u.x),Object(a.render)(o.createElement(x,null),document.getElementById("root"))},!1);var x=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.render=function(){return o.createElement(l.a,{basename:"/uikit-react"},o.createElement(u.x,{position:"relative"},o.createElement(u.x,{color:"secondary",preserveColor:!0},o.createElement(u.w,{options:"animation: uk-animation-slide-top; cls-inactive: uk-navbar-transparent uk-light; top: 556;"},o.createElement(u.v,null,o.createElement(u.u,{align:"left"},o.createElement(u.r,{padding:"small"},o.createElement("a",{href:"/"},o.createElement("img",{width:"200",height:"200",src:"src/images/uikit-react-simple-text.svg"})))),o.createElement(u.u,{align:"right"},o.createElement(u.r,null,o.createElement(c.a,{to:"/docs/0.0.1/Introduction"},o.createElement(u.g,{size:"small"},"Documentation"))),o.createElement(u.r,null,o.createElement(u.q,null,"Changelog")),o.createElement(u.r,null,o.createElement(u.q,{href:"https://github.com/vacarsu/dimension-cms"},o.createElement(u.o,{options:"github",button:!0}))))))),o.createElement(i.a,{exact:!0,path:"/",component:w}),o.createElement(i.a,{path:"/docs",component:E})))},t}(o.Component)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,